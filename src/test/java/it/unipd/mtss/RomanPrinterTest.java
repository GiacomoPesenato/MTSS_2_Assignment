////////////////////////////////////////////////////////////////////
// GIACOMO PESENATO 2076429
// FRANCESCO FRAGONAS 2076436
////////////////////////////////////////////////////////////////////
package it.unipd.mtss;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class RomanPrinterTest {
    @Test(expected=IllegalArgumentException.class)
    public void testZeroNumber() {
        int num = 0;
        String result = RomanPrinter.print(num);
    }

    @Test(expected=IllegalArgumentException.class)
    public void testNegativeNumber() {
        int num = -1;
        String result = RomanPrinter.print(num);
    }

    @Test(expected=IllegalArgumentException.class)
    public void testNumberOutOfRange() {
        int num = 1001;
        String result = IntegerToRoman.convert(num);
    }

    @Test
    public void testFirstThreeNumbers() {
        int[] decimalNumbers = {1,3};
        String[] romanNumbers = {
                " _____ \n" + //
                        "|_   _|\n" + //
                        "  | |  \n" + //
                        "  | |  \n" + //
                        " _| |_ \n" + //
                        "|_____|\n",
                " _____  _____  _____ \n" + //
                        "|_   _||_   _||_   _|\n" + //
                        "  | |    | |    | |  \n" + //
                        "  | |    | |    | |  \n" + //
                        " _| |_  _| |_  _| |_ \n" + //
                        "|_____||_____||_____|\n"};

        for (int i=0; i<decimalNumbers.length; i++){
            assertEquals(RomanPrinter.print(decimalNumbers[i]).trim(), romanNumbers[i].trim());
        }
    }

    @Test
    public void testFirstSixNumbers() {
        int[] decimalNumbers = {4, 6};
        String[] romanNumbers = {
                " _____ __      __ \n" +
                        "|_   _|\\ \\    / / \n" +
                        "  | |   \\ \\  / /  \n" +
                        "  | |    \\ \\/ /   \n" +
                        " _| |_    \\  /    \n" +
                        "|_____|    \\/     ",
                "__      __  _____ \n" +
                        "\\ \\    / / |_   _|\n" +
                        " \\ \\  / /    | |  \n" +
                        "  \\ \\/ /     | |  \n" +
                        "   \\  /     _| |_ \n" +
                        "    \\/     |_____|"};

        for (int i=0; i<decimalNumbers.length; i++){
            assertEquals(RomanPrinter.print(decimalNumbers[i]).trim(), romanNumbers[i].trim());
        }
    }

    @Test
    public void testFirstTenNumbers() {
        int[] decimalNumbers = {7,9,10};
        String[] romanNumbers = {
                "__      __  _____  _____ \n" +
                        "\\ \\    / / |_   _||_   _|\n" +
                        " \\ \\  / /    | |    | |  \n" +
                        "  \\ \\/ /     | |    | |  \n" +
                        "   \\  /     _| |_  _| |_ \n" +
                        "    \\/     |_____||_____|",
                " _____ __   __ \n" +
                        "|_   _|\\ \\ / / \n" +
                        "  | |   \\ V /  \n" +
                        "  | |    > <   \n" +
                        " _| |_  / . \\  \n" +
                        "|_____|/_/ \\_\\",
                "__   __ \n" +
                        "\\ \\ / / \n" +
                        " \\ V /  \n" +
                        "  > <   \n" +
                        " / . \\  \n" +
                        "/_/ \\_\\ "};

        for (int i=0; i<decimalNumbers.length; i++){
            assertEquals(RomanPrinter.print(decimalNumbers[i]).trim(), romanNumbers[i].trim());
        }
    }

    @Test
    public void testFirstTwentyNumbers() {
        int[] decimalNumbers = {11,14,15,16,19,20};
        String[] romanNumbers = {
                "__   __  _____ \n" +
                        "\\ \\ / / |_   _|\n" +
                        " \\ V /    | |  \n" +
                        "  > <     | |  \n" +
                        " / . \\   _| |_ \n" +
                        "/_/ \\_\\ |_____|",
                "__   __  _____ __      __ \n" +
                        "\\ \\ / / |_   _|\\ \\    / / \n" +
                        " \\ V /    | |   \\ \\  / /  \n" +
                        "  > <     | |    \\ \\/ /   \n" +
                        " / . \\   _| |_    \\  /    \n" +
                        "/_/ \\_\\ |_____|    \\/     ",
                "__   __ __      __ \n" +
                        "\\ \\ / / \\ \\    / / \n" +
                        " \\ V /   \\ \\  / /  \n" +
                        "  > <     \\ \\/ /   \n" +
                        " / . \\     \\  /    \n" +
                        "/_/ \\_\\     \\/     ",
                "__   __ __      __  _____ \n" +
                        "\\ \\ / / \\ \\    / / |_   _|\n" +
                        " \\ V /   \\ \\  / /    | |  \n" +
                        "  > <     \\ \\/ /     | |  \n" +
                        " / . \\     \\  /     _| |_ \n" +
                        "/_/ \\_\\     \\/     |_____|",
                "__   __  _____ __   __ \n" +
                        "\\ \\ / / |_   _|\\ \\ / / \n" +
                        " \\ V /    | |   \\ V /  \n" +
                        "  > <     | |    > <   \n" +
                        " / . \\   _| |_  / . \\  \n" +
                        "/_/ \\_\\ |_____|/_/ \\_\\ ",
                "__   __ __   __ \n" +
                        "\\ \\ / / \\ \\ / / \n" +
                        " \\ V /   \\ V /  \n" +
                        "  > <     > <   \n" +
                        " / . \\   / . \\  \n" +
                        "/_/ \\_\\ /_/ \\_\\ "
        };

        for (int i=0; i<decimalNumbers.length; i++){
            assertEquals(RomanPrinter.print(decimalNumbers[i]).trim(), romanNumbers[i].trim());
        }
    }

    @Test
    public void testFirstFiftyNumbers() {
        int[] decimalNumbers = {21,29,30,35,40,44,50};
        String[] romanNumbers = {
                "__   __ __   __  _____ \n" +
                        "\\ \\ / / \\ \\ / / |_   _|\n" +
                        " \\ V /   \\ V /    | |  \n" +
                        "  > <     > <     | |  \n" +
                        " / . \\   / . \\   _| |_ \n" +
                        "/_/ \\_\\ /_/ \\_\\ |_____|",
                "__   __ __   __  _____ __   __ \n" +
                        "\\ \\ / / \\ \\ / / |_   _|\\ \\ / / \n" +
                        " \\ V /   \\ V /    | |   \\ V /  \n" +
                        "  > <     > <     | |    > <   \n" +
                        " / . \\   / . \\   _| |_  / . \\  \n" +
                        "/_/ \\_\\ /_/ \\_\\ |_____|/_/ \\_\\",
                "__   __ __   __ __   __ \n" +
                        "\\ \\ / / \\ \\ / / \\ \\ / / \n" +
                        " \\ V /   \\ V /   \\ V /  \n" +
                        "  > <     > <     > <   \n" +
                        " / . \\   / . \\   / . \\  \n" +
                        "/_/ \\_\\ /_/ \\_\\ /_/ \\_\\ ",
                "__   __ __   __ __   __ __      __ \n" +
                        "\\ \\ / / \\ \\ / / \\ \\ / / \\ \\    / / \n" +
                        " \\ V /   \\ V /   \\ V /   \\ \\  / /  \n" +
                        "  > <     > <     > <     \\ \\/ /   \n" +
                        " / . \\   / . \\   / . \\     \\  /    \n" +
                        "/_/ \\_\\ /_/ \\_\\ /_/ \\_\\     \\/     ",
                "__   __  _      \n" +
                        "\\ \\ / / | |     \n" +
                        " \\ V /  | |     \n" +
                        "  > <   | |     \n" +
                        " / . \\  | |____ \n" +
                        "/_/ \\_\\ |______|",
                "__   __  _       _____ __      __ \n" +
                        "\\ \\ / / | |     |_   _|\\ \\    / / \n" +
                        " \\ V /  | |       | |   \\ \\  / /  \n" +
                        "  > <   | |       | |    \\ \\/ /   \n" +
                        " / . \\  | |____  _| |_    \\  /    \n" +
                        "/_/ \\_\\ |______||_____|    \\/     ",
                " _      \n" +
                        "| |     \n" +
                        "| |     \n" +
                        "| |     \n" +
                        "| |____ \n" +
                        "|______|"
        };

        for (int i=0; i<decimalNumbers.length; i++){
            assertEquals(RomanPrinter.print(decimalNumbers[i]).trim(), romanNumbers[i].trim());
        }
    }

    @Test
    public void testFirstHundredNumbers() {
        int[] decimalNumbers = {51,54,60,74,84,86,89,90,94,95,99,100};
        String[] romanNumbers = {
                " _       _____ \n" +
                        "| |     |_   _|\n" +
                        "| |       | |  \n" +
                        "| |       | |  \n" +
                        "| |____  _| |_ \n" +
                        "|______||_____|",
                " _       _____ __      __ \n" +
                        "| |     |_   _|\\ \\    / / \n" +
                        "| |       | |   \\ \\  / /  \n" +
                        "| |       | |    \\ \\/ /   \n" +
                        "| |____  _| |_    \\  /    \n" +
                        "|______||_____|    \\/    ",
                " _      __   __ \n" +
                        "| |     \\ \\ / / \n" +
                        "| |      \\ V /  \n" +
                        "| |       > <   \n" +
                        "| |____  / . \\  \n" +
                        "|______|/_/ \\_\\  ",
                " _      __   __ __   __  _____ __      __ \n" +
                        "| |     \\ \\ / / \\ \\ / / |_   _|\\ \\    / / \n" +
                        "| |      \\ V /   \\ V /    | |   \\ \\  / /  \n" +
                        "| |       > <     > <     | |    \\ \\/ /   \n" +
                        "| |____  / . \\   / . \\   _| |_    \\  /    \n" +
                        "|______|/_/ \\_\\ /_/ \\_\\ |_____|    \\/    ",
                " _      __   __ __   __ __   __  _____ __      __ \n" +
                        "| |     \\ \\ / / \\ \\ / / \\ \\ / / |_   _|\\ \\    / / \n" +
                        "| |      \\ V /   \\ V /   \\ V /    | |   \\ \\  / /  \n" +
                        "| |       > <     > <     > <     | |    \\ \\/ /   \n" +
                        "| |____  / . \\   / . \\   / . \\   _| |_    \\  /    \n" +
                        "|______|/_/ \\_\\ /_/ \\_\\ /_/ \\_\\ |_____|    \\/     ",
                " _      __   __ __   __ __   __ __      __  _____ \n" +
                        "| |     \\ \\ / / \\ \\ / / \\ \\ / / \\ \\    / / |_   _|\n" +
                        "| |      \\ V /   \\ V /   \\ V /   \\ \\  / /    | |  \n" +
                        "| |       > <     > <     > <     \\ \\/ /     | |  \n" +
                        "| |____  / . \\   / . \\   / . \\     \\  /     _| |_ \n" +
                        "|______|/_/ \\_\\ /_/ \\_\\ /_/ \\_\\     \\/     |_____|",
                "  _      __   __ __   __ __   __  _____ __   __ \n" +
                        "| |     \\ \\ / / \\ \\ / / \\ \\ / / |_   _|\\ \\ / / \n" +
                        "| |      \\ V /   \\ V /   \\ V /    | |   \\ V /  \n" +
                        "| |       > <     > <     > <     | |    > <   \n" +
                        "| |____  / . \\   / . \\   / . \\   _| |_  / . \\  \n" +
                        "|______|/_/ \\_\\ /_/ \\_\\ /_/ \\_\\ |_____|/_/ \\_\\ ",
                "__   __   _____ \n" +
                        "\\ \\ / /  / ____|\n" +
                        " \\ V /  | |     \n" +
                        "  > <   | |     \n" +
                        " / . \\  | |____ \n" +
                        "/_/ \\_\\  \\_____|",
                "__   __   _____  _____ __      __ \n" +
                        "\\ \\ / /  / ____||_   _|\\ \\    / / \n" +
                        " \\ V /  | |       | |   \\ \\  / /  \n" +
                        "  > <   | |       | |    \\ \\/ /   \n" +
                        " / . \\  | |____  _| |_    \\  /    \n" +
                        "/_/ \\_\\  \\_____||_____|    \\/     ",
                "__   __   _____ __      __ \n" +
                        "\\ \\ / /  / ____|\\ \\    / / \n" +
                        " \\ V /  | |      \\ \\  / /  \n" +
                        "  > <   | |       \\ \\/ /   \n" +
                        " / . \\  | |____    \\  /    \n" +
                        "/_/ \\_\\  \\_____|    \\/     ",
                "__   __   _____  _____ __   __ \n" +
                        "\\ \\ / /  / ____||_   _|\\ \\ / / \n" +
                        " \\ V /  | |       | |   \\ V /  \n" +
                        "  > <   | |       | |    > <   \n" +
                        " / . \\  | |____  _| |_  / . \\  \n" +
                        "/_/ \\_\\  \\_____||_____|/_/ \\_\\ ",
                "  _____ \n" +
                        " / ____|\n" +
                        "| |     \n" +
                        "| |     \n" +
                        "| |____ \n" +
                        " \\_____|"
        };

        for (int i=0; i<decimalNumbers.length; i++){
            assertEquals(RomanPrinter.print(decimalNumbers[i]).trim(), romanNumbers[i].trim());
        }
    }

    @Test
    public void testFirstFivehundredNumbers() {
        int[] decimalNumbers = {101, 113, 159, 188, 204, 249, 298, 315, 348, 367, 412, 458, 476, 499, 500};
        String[] romanNumbers = {
                "  _____  _____ \n" +
                        " / ____||_   _|\n" +
                        "| |       | |  \n" +
                        "| |       | |  \n" +
                        "| |____  _| |_ \n" +
                        " \\_____||_____|",
                "  _____ __   __  _____  _____  _____ \n" +
                        " / ____|\\ \\ / / |_   _||_   _||_   _|\n" +
                        "| |      \\ V /    | |    | |    | |  \n" +
                        "| |       > <     | |    | |    | |  \n" +
                        "| |____  / . \\   _| |_  _| |_  _| |_ \n" +
                        " \\_____|/_/ \\_\\ |_____||_____||_____|",
                "  _____  _       _____ __   __ \n" +
                        " / ____|| |     |_   _|\\ \\ / / \n" +
                        "| |     | |       | |   \\ V /  \n" +
                        "| |     | |       | |    > <   \n" +
                        "| |____ | |____  _| |_  / . \\  \n" +
                        " \\_____||______||_____|/_/ \\_\\ ",
                "  _____  _      __   __ __   __ __   __ __      __  _____  _____  _____ \n" +
                        " / ____|| |     \\ \\ / / \\ \\ / / \\ \\ / / \\ \\    / / |_   _||_   _||_   _|\n" +
                        "| |     | |      \\ V /   \\ V /   \\ V /   \\ \\  / /    | |    | |    | |  \n" +
                        "| |     | |       > <     > <     > <     \\ \\/ /     | |    | |    | |  \n" +
                        "| |____ | |____  / . \\   / . \\   / . \\     \\  /     _| |_  _| |_  _| |_ \n" +
                        " \\_____||______|/_/ \\_\\ /_/ \\_\\ /_/ \\_\\     \\/     |_____||_____||_____|",
                "  _____   _____  _____ __      __ \n" +
                        " / ____| / ____||_   _|\\ \\    / / \n" +
                        "| |     | |       | |   \\ \\  / /  \n" +
                        "| |     | |       | |    \\ \\/ /   \n" +
                        "| |____ | |____  _| |_    \\  /    \n" +
                        " \\_____| \\_____||_____|    \\/     ",
                "  _____   _____ __   __  _       _____ __   __ \n" +
                        " / ____| / ____|\\ \\ / / | |     |_   _|\\ \\ / / \n" +
                        "| |     | |      \\ V /  | |       | |   \\ V /  \n" +
                        "| |     | |       > <   | |       | |    > <   \n" +
                        "| |____ | |____  / . \\  | |____  _| |_  / . \\  \n" +
                        " \\_____| \\_____|/_/ \\_\\ |______||_____|/_/ \\_\\ ",
                "  _____   _____ __   __   _____ __      __  _____  _____  _____ \n" +
                        " / ____| / ____|\\ \\ / /  / ____|\\ \\    / / |_   _||_   _||_   _|\n" +
                        "| |     | |      \\ V /  | |      \\ \\  / /    | |    | |    | |  \n" +
                        "| |     | |       > <   | |       \\ \\/ /     | |    | |    | |  \n" +
                        "| |____ | |____  / . \\  | |____    \\  /     _| |_  _| |_  _| |_ \n" +
                        " \\_____| \\_____|/_/ \\_\\  \\_____|    \\/     |_____||_____||_____|",
                "  _____   _____   _____ __   __ __      __ \n" +
                        " / ____| / ____| / ____|\\ \\ / / \\ \\    / / \n" +
                        "| |     | |     | |      \\ V /   \\ \\  / /  \n" +
                        "| |     | |     | |       > <     \\ \\/ /   \n" +
                        "| |____ | |____ | |____  / . \\     \\  /    \n" +
                        " \\_____| \\_____| \\_____|/_/ \\_\\     \\/     ",
                "  _____   _____   _____ __   __  _      __      __  _____  _____  _____ \n" +
                        " / ____| / ____| / ____|\\ \\ / / | |     \\ \\    / / |_   _||_   _||_   _|\n" +
                        "| |     | |     | |      \\ V /  | |      \\ \\  / /    | |    | |    | |  \n" +
                        "| |     | |     | |       > <   | |       \\ \\/ /     | |    | |    | |  \n" +
                        "| |____ | |____ | |____  / . \\  | |____    \\  /     _| |_  _| |_  _| |_ \n" +
                        " \\_____| \\_____| \\_____|/_/ \\_\\ |______|    \\/     |_____||_____||_____|",
                "  _____   _____   _____  _      __   __ __      __  _____  _____ \n" +
                        " / ____| / ____| / ____|| |     \\ \\ / / \\ \\    / / |_   _||_   _|\n" +
                        "| |     | |     | |     | |      \\ V /   \\ \\  / /    | |    | |  \n" +
                        "| |     | |     | |     | |       > <     \\ \\/ /     | |    | |  \n" +
                        "| |____ | |____ | |____ | |____  / . \\     \\  /     _| |_  _| |_ \n" +
                        " \\_____| \\_____| \\_____||______|/_/ \\_\\     \\/     |_____||_____|",
                "  _____  _____  __   __  _____  _____ \n" +
                        " / ____||  __ \\ \\ \\ / / |_   _||_   _|\n" +
                        "| |     | |  | | \\ V /    | |    | |  \n" +
                        "| |     | |  | |  > <     | |    | |  \n" +
                        "| |____ | |__| | / . \\   _| |_  _| |_ \n" +
                        " \\_____||_____/ /_/ \\_\\ |_____||_____|",
                "  _____  _____   _      __      __  _____  _____  _____ \n" +
                        " / ____||  __ \\ | |     \\ \\    / / |_   _||_   _||_   _|\n" +
                        "| |     | |  | || |      \\ \\  / /    | |    | |    | |  \n" +
                        "| |     | |  | || |       \\ \\/ /     | |    | |    | |  \n" +
                        "| |____ | |__| || |____    \\  /     _| |_  _| |_  _| |_ \n" +
                        " \\_____||_____/ |______|    \\/     |_____||_____||_____|",
                "  _____  _____   _      __   __ __   __ __      __  _____ \n" +
                        " / ____||  __ \\ | |     \\ \\ / / \\ \\ / / \\ \\    / / |_   _|\n" +
                        "| |     | |  | || |      \\ V /   \\ V /   \\ \\  / /    | |  \n" +
                        "| |     | |  | || |       > <     > <     \\ \\/ /     | |  \n" +
                        "| |____ | |__| || |____  / . \\   / . \\     \\  /     _| |_ \n" +
                        " \\_____||_____/ |______|/_/ \\_\\ /_/ \\_\\     \\/     |_____|",
                "  _____  _____  __   __   _____  _____ __   __ \n" +
                        " / ____||  __ \\ \\ \\ / /  / ____||_   _|\\ \\ / / \n" +
                        "| |     | |  | | \\ V /  | |       | |   \\ V /  \n" +
                        "| |     | |  | |  > <   | |       | |    > <   \n" +
                        "| |____ | |__| | / . \\  | |____  _| |_  / . \\  \n" +
                        " \\_____||_____/ /_/ \\_\\  \\_____||_____|/_/ \\_\\ ",
                " _____  \n" +
                        "|  __ \\ \n" +
                        "| |  | |\n" +
                        "| |  | |\n" +
                        "| |__| |\n" +
                        "|_____/ "
        };

        for (int i=0; i<decimalNumbers.length; i++){
            assertEquals(RomanPrinter.print(decimalNumbers[i]).trim(), romanNumbers[i].trim());
        }
    }
    @Test
    public void testFirstThousandNumbers() {
        int[] decimalNumbers = {501,509,574,599,666,646,659,693,732,755,777,800,832,889,900,941,964,976,999,1000};
        String[] romanNumbers = {
                " _____   _____ \n" +
                        "|  __ \\ |_   _|\n" +
                        "| |  | |  | |  \n" +
                        "| |  | |  | |  \n" +
                        "| |__| | _| |_ \n" +
                        "|_____/ |_____|",
                " _____   _____ __   __ \n" +
                        "|  __ \\ |_   _|\\ \\ / / \n" +
                        "| |  | |  | |   \\ V /  \n" +
                        "| |  | |  | |    > <   \n" +
                        "| |__| | _| |_  / . \\  \n" +
                        "|_____/ |_____|/_/ \\_\\ \n",
                " _____   _      __   __ __   __  _____ __      __ \n" +
                        "|  __ \\ | |     \\ \\ / / \\ \\ / / |_   _|\\ \\    / / \n" +
                        "| |  | || |      \\ V /   \\ V /    | |   \\ \\  / /  \n" +
                        "| |  | || |       > <     > <     | |    \\ \\/ /   \n" +
                        "| |__| || |____  / . \\   / . \\   _| |_    \\  /    \n" +
                        "|_____/ |______|/_/ \\_\\ /_/ \\_\\ |_____|    \\/    ",
                " _____  __   __   _____  _____ __   __ \n" +
                        "|  __ \\ \\ \\ / /  / ____||_   _|\\ \\ / / \n" +
                        "| |  | | \\ V /  | |       | |   \\ V /  \n" +
                        "| |  | |  > <   | |       | |    > <   \n" +
                        "| |__| | / . \\  | |____  _| |_  / . \\  \n" +
                        "|_____/ /_/ \\_\\  \\_____||_____|/_/ \\_\\",
                " _____    _____  _      __   __ __      __  _____ \n" +
                        "|  __ \\  / ____|| |     \\ \\ / / \\ \\    / / |_   _|\n" +
                        "| |  | || |     | |      \\ V /   \\ \\  / /    | |  \n" +
                        "| |  | || |     | |       > <     \\ \\/ /     | |  \n" +
                        "| |__| || |____ | |____  / . \\     \\  /     _| |_ \n" +
                        "|_____/  \\_____||______|/_/ \\_\\     \\/     |_____|",
                " _____    _____ __   __  _      __      __  _____ \n" +
                        "|  __ \\  / ____|\\ \\ / / | |     \\ \\    / / |_   _|\n" +
                        "| |  | || |      \\ V /  | |      \\ \\  / /    | |  \n" +
                        "| |  | || |       > <   | |       \\ \\/ /     | |  \n" +
                        "| |__| || |____  / . \\  | |____    \\  /     _| |_ \n" +
                        "|_____/  \\_____|/_/ \\_\\ |______|    \\/     |_____|",
                " _____    _____  _       _____ __   __ \n" +
                        "|  __ \\  / ____|| |     |_   _|\\ \\ / / \n" +
                        "| |  | || |     | |       | |   \\ V /  \n" +
                        "| |  | || |     | |       | |    > <   \n" +
                        "| |__| || |____ | |____  _| |_  / . \\  \n" +
                        "|_____/  \\_____||______||_____|/_/ \\_\\ ",
                " _____    _____ __   __   _____  _____  _____  _____ \n" +
                        "|  __ \\  / ____|\\ \\ / /  / ____||_   _||_   _||_   _|\n" +
                        "| |  | || |      \\ V /  | |       | |    | |    | |  \n" +
                        "| |  | || |       > <   | |       | |    | |    | |  \n" +
                        "| |__| || |____  / . \\  | |____  _| |_  _| |_  _| |_ \n" +
                        "|_____/  \\_____|/_/ \\_\\  \\_____||_____||_____||_____|",
                " _____    _____   _____ __   __ __   __ __   __  _____  _____ \n" +
                        "|  __ \\  / ____| / ____|\\ \\ / / \\ \\ / / \\ \\ / / |_   _||_   _|\n" +
                        "| |  | || |     | |      \\ V /   \\ V /   \\ V /    | |    | |  \n" +
                        "| |  | || |     | |       > <     > <     > <     | |    | |  \n" +
                        "| |__| || |____ | |____  / . \\   / . \\   / . \\   _| |_  _| |_ \n" +
                        "|_____/  \\_____| \\_____|/_/ \\_\\ /_/ \\_\\ /_/ \\_\\ |_____||_____|",
                " _____    _____   _____  _      __      __ \n" +
                        "|  __ \\  / ____| / ____|| |     \\ \\    / / \n" +
                        "| |  | || |     | |     | |      \\ \\  / /  \n" +
                        "| |  | || |     | |     | |       \\ \\/ /   \n" +
                        "| |__| || |____ | |____ | |____    \\  /    \n" +
                        "|_____/  \\_____| \\_____||______|    \\/     ",
                " _____    _____   _____  _      __   __ __   __ __      __  _____  _____ \n" +
                        "|  __ \\  / ____| / ____|| |     \\ \\ / / \\ \\ / / \\ \\    / / |_   _||_   _|\n" +
                        "| |  | || |     | |     | |      \\ V /   \\ V /   \\ \\  / /    | |    | |  \n" +
                        "| |  | || |     | |     | |       > <     > <     \\ \\/ /     | |    | |  \n" +
                        "| |__| || |____ | |____ | |____  / . \\   / . \\     \\  /     _| |_  _| |_ \n" +
                        "|_____/  \\_____| \\_____||______|/_/ \\_\\ /_/ \\_\\     \\/     |_____||_____|\n",
                " _____    _____   _____   _____ \n" +
                        "|  __ \\  / ____| / ____| / ____|\n" +
                        "| |  | || |     | |     | |     \n" +
                        "| |  | || |     | |     | |     \n" +
                        "| |__| || |____ | |____ | |____ \n" +
                        "|_____/  \\_____| \\_____| \\_____|\n",
                " _____    _____   _____   _____ __   __ __   __ __   __  _____  _____ \n" +
                        "|  __ \\  / ____| / ____| / ____|\\ \\ / / \\ \\ / / \\ \\ / / |_   _||_   _|\n" +
                        "| |  | || |     | |     | |      \\ V /   \\ V /   \\ V /    | |    | |  \n" +
                        "| |  | || |     | |     | |       > <     > <     > <     | |    | |  \n" +
                        "| |__| || |____ | |____ | |____  / . \\   / . \\   / . \\   _| |_  _| |_ \n" +
                        "|_____/  \\_____| \\_____| \\_____|/_/ \\_\\ /_/ \\_\\ /_/ \\_\\ |_____||_____|",
                " _____    _____   _____   _____  _      __   __ __   __ __   __  _____ __   __ \n" +
                        "|  __ \\  / ____| / ____| / ____|| |     \\ \\ / / \\ \\ / / \\ \\ / / |_   _|\\ \\ / / \n" +
                        "| |  | || |     | |     | |     | |      \\ V /   \\ V /   \\ V /    | |   \\ V /  \n" +
                        "| |  | || |     | |     | |     | |       > <     > <     > <     | |    > <   \n" +
                        "| |__| || |____ | |____ | |____ | |____  / . \\   / . \\   / . \\   _| |_  / . \\  \n" +
                        "|_____/  \\_____| \\_____| \\_____||______|/_/ \\_\\ /_/ \\_\\ /_/ \\_\\ |_____|/_/ \\_\\ ",
                "  _____  __  __ \n" +
                        " / ____||  \\/  |\n" +
                        "| |     | \\  / |\n" +
                        "| |     | |\\/| |\n" +
                        "| |____ | |  | |\n" +
                        " \\_____||_|  |_|",
                "  _____  __  __ __   __  _       _____ \n" +
                        " / ____||  \\/  |\\ \\ / / | |     |_   _|\n" +
                        "| |     | \\  / | \\ V /  | |       | |  \n" +
                        "| |     | |\\/| |  > <   | |       | |  \n" +
                        "| |____ | |  | | / . \\  | |____  _| |_ \n" +
                        " \\_____||_|  |_|/_/ \\_\\ |______||_____|",
                "  _____  __  __  _      __   __  _____ __      __ \n" +
                        " / ____||  \\/  || |     \\ \\ / / |_   _|\\ \\    / / \n" +
                        "| |     | \\  / || |      \\ V /    | |   \\ \\  / /  \n" +
                        "| |     | |\\/| || |       > <     | |    \\ \\/ /   \n" +
                        "| |____ | |  | || |____  / . \\   _| |_    \\  /    \n" +
                        " \\_____||_|  |_||______|/_/ \\_\\ |_____|    \\/     \n",
                "  _____  __  __  _      __   __ __   __ __      __  _____ \n" +
                        " / ____||  \\/  || |     \\ \\ / / \\ \\ / / \\ \\    / / |_   _|\n" +
                        "| |     | \\  / || |      \\ V /   \\ V /   \\ \\  / /    | |  \n" +
                        "| |     | |\\/| || |       > <     > <     \\ \\/ /     | |  \n" +
                        "| |____ | |  | || |____  / . \\   / . \\     \\  /     _| |_ \n" +
                        " \\_____||_|  |_||______|/_/ \\_\\ /_/ \\_\\     \\/     |_____|",
                "  _____  __  __ __   __   _____  _____ __   __ \n" +
                        " / ____||  \\/  |\\ \\ / /  / ____||_   _|\\ \\ / / \n" +
                        "| |     | \\  / | \\ V /  | |       | |   \\ V /  \n" +
                        "| |     | |\\/| |  > <   | |       | |    > <   \n" +
                        "| |____ | |  | | / . \\  | |____  _| |_  / . \\  \n" +
                        " \\_____||_|  |_|/_/ \\_\\  \\_____||_____|/_/ \\_\\ ",
                " __  __ \n" +
                        "|  \\/  |\n" +
                        "| \\  / |\n" +
                        "| |\\/| |\n" +
                        "| |  | |\n" +
                        "|_|  |_|"
        };

        for (int i=0; i<decimalNumbers.length; i++){
            assertEquals(RomanPrinter.print(decimalNumbers[i]).trim(), romanNumbers[i].trim());
        }
    }
}